#!/usr/bin/env python

PACKAGE = 'pandora_move_base'

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, str_t, double_t, bool_t

gen = ParameterGenerator()

gen.add(
    "base_global_planner", str_t, 0,
    "The name of the plugin for the global planner to use with move_base.",
    "navfn/NavfnROS")
gen.add(
    "base_local_planner", str_t, 0,
    "The name of the plugin for the local planner to use with move_base.",
    "dwa_local_planner/DWAPlannerROS")

gen.add(
    "planner_frequency", double_t, 0,
    "The rate in Hz at which to run the planning loop.", 1.0, 0, 100)
gen.add(
    "controller_frequency", double_t, 0,
    "The rate in Hz at which to run the control loop and send velocity commands to the base.",
    5.0, 0, 100)
gen.add(
    "planner_patience", double_t, 0,
    "How long the planner will wait in seconds in an attempt to find a valid plan before space-clearing operations are performed.",
    5.0, 0, 100)
gen.add(
    "controller_patience", double_t, 0,
    "How long the controller will wait in seconds without receiving a valid control before space-clearing operations are performed.",
    5.0, 0, 100)

gen.add(
    "oscillation_timeout", double_t, 0,
    "How long in seconds to allow for oscillation before executing recovery behaviors.",
    7.5, 0, 60)
gen.add(
    "oscillation_recovery_time", double_t, 0,
    "How many seconds to add to timeout after executing a recovery behavior.",
    2.5, 0, 10)
gen.add(
    "oscillation_distance", double_t, 0,
    "How far in meters the robot must move to be considered not to be oscillating.",
    0.2, 0, 10)
gen.add(
    "oscillation_angle", double_t, 0,
    "How much in rads the robot must rotate to be considered not to be oscillating.",
    0.4, 0, 6.28)

gen.add(
    "recovery_behavior_enabled", bool_t, 0,
    "Determines whether or not to enable the move_base recovery behaviors to attempt to get the robot unstuck.",
    True)
gen.add(
    "clear_costmap_recovery_allowed", bool_t, 0,
    "Determines whether or not to clear the global and local costmaps.",
    True)
gen.add(
    "collision_recovery_allowed", bool_t, 0,
    "Determines whether or not the robot will attempt a move when detecting a collision.",
    True)
gen.add(
    "rotate_recovery_allowed", bool_t, 0,
    "Determines whether or not the robot will attempt an in-place rotation when attempting to clear out space.",
    False)

gen.add(
    "conservative_reset_dist", double_t, 0,
    "The distance away from the robot in meters at which obstacles will be conservatively cleared from the costmap when attempting to clear space in the map.",
    3.0, 0, 50)
gen.add(
    "aggressive_reset_dist", double_t, 0,
    "The distance away from the robot in meters at which obstacles will be aggressively cleared from the costmap when attempting to clear space in the map.",
    4.6, 0, 50)
gen.add(
    "linear_escape_vel", double_t, 0,
    "The linear velocity at which the robot will move when attempting to escape when detecting a collision",
    0.2, 0, 1.0)
gen.add(
    "angular_escape_vel", double_t, 0,
    "The angular velocity at which the robot will move when attempting to escape when detecting a collision",
    0.2, 0, 1.0)
gen.add(
    "rotate_angle", double_t, 0,
    "The angle at which the robot will rotate when attempting to clear out space.",
    6.28, 0, 100)

gen.add(
    "shutdown_costmaps", bool_t, 0,
    "Determines whether or not to shutdown the costmaps of the node when move_base is in an inactive state",
    False)

gen.add(
    "restore_defaults", bool_t, 0,
    "Restore to the original configuration",
    False)

exit(gen.generate(PACKAGE, "move_base_node", "MoveBase"))
